name: Deploy to ECR

on:
  pull_request:
    branches:
      - master
    types: [closed]  

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true  
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1  

      - name: Build, test, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          MYSQL_ECR_REPOSITORY: ${{ secrets.MYSQL_ECR_REPOSITORY }}
          MYSQL_IMAGE_TAG: ${{ secrets.MYSQL_IMAGE_TAG }}
          WEBAPP_ECR_REPOSITORY: ${{ secrets.WEBAPP_ECR_REPOSITORY }}
          WEBAPP_IMAGE_TAG: ${{ secrets.WEBAPP_IMAGE_TAG }}
        run: |
          echo "Building MySQL Image..."
          docker build -f Dockerfile_mysql -t $ECR_REGISTRY/$MYSQL_ECR_REPOSITORY:$MYSQL_IMAGE_TAG .

          echo "Building WebApp Image..."
          docker build -f Dockerfile -t $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$WEBAPP_IMAGE_TAG .

          echo "Pushing MySQL Image to ECR..."
          docker push $ECR_REGISTRY/$MYSQL_ECR_REPOSITORY:$MYSQL_IMAGE_TAG

          echo "Pushing WebApp Image to ECR..."
          docker push $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$WEBAPP_IMAGE_TAG

      - name: SSH into EC2 and run commands
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
            AWS_REGION: us-east-1
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            MYSQL_ECR_REPOSITORY: ${{ secrets.MYSQL_ECR_REPOSITORY }}
            MYSQL_IMAGE_TAG: ${{ secrets.MYSQL_IMAGE_TAG }}
            WEBAPP_ECR_REPOSITORY: ${{ secrets.WEBAPP_ECR_REPOSITORY }}
            WEBAPP_IMAGE_TAG: ${{ secrets.WEBAPP_IMAGE_TAG }}
            
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

          echo "Connecting to EC2 instances"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.PUBLIC_IP }} << 'EOF'
          sudo usermod -a -G docker ec2-user


          # Step 1: Login to Amazon ECR
            echo "Logging into Amazon ECR..."
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set aws_session_token "${{ secrets.AWS_SESSION_TOKEN }}"
            aws configure set region us-east-1

            echo "Logging into Amazon ECR on EC2..."
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

          # Step 2: Pull Docker images
            echo "Pulling MySQL image from ECR.."
            docker pull $ECR_REGISTRY/$MYSQL_ECR_REPOSITORY:$MYSQL_IMAGE_TAG

            echo "Pulling WebApp image from ECR..."
            docker pull $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$WEBAPP_IMAGE_TAG

            # Step 3: Create a custom Docker network
            echo "Creating Docker network 'mynetwork'."
            docker network create mynetwork

            # Step 4: Run the MySQL container
            echo "Running MySQL container."
            docker run -d --network mynetwork --name mysql-container -e MYSQL_ROOT_PASSWORD=root $ECR_REGISTRY/$MYSQL_ECR_REPOSITORY:$MYSQL_IMAGE_TAG

            # Step 5: Set the DATABASE environment variable
            export DATABASE=employees

            # Step 6: Run WebApp containers on different ports with DB environment variables
            echo "Running WebApp container on port 8081..."
            docker run -d --network mynetwork --name webapp-container-1 -p 8081:80 -e DBHOST=mysql-container -e DBPORT=3306 -e DBUSER=root -e DBPWD=pw -e APP_COLOR=blue $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$WEBAPP_IMAGE_TAG

            echo "Running WebApp container on port 8082..."
            docker run -d --network mynetwork --name webapp-container-2 -p 8082:80 \
              -e DBHOST=mysql-container -e DBPORT=3306 -e DBUSER=root -e DBPWD=pw -e APP_COLOR=blue \
              $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$WEBAPP_IMAGE_TAG

            echo "Running WebApp container on port 8083."
            docker run -d --network mynetwork --name webapp-container-3 -p 8083:80 \
              -e DBHOST=mysql-container -e DBPORT=3306 -e DBUSER=root -e DBPWD=pw -e APP_COLOR=blue \
              $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$WEBAPP_IMAGE_TAG
          EOF
